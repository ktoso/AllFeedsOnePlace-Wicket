apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'groovy'

repositories {
  mavenCentral()
  mavenRepo urls: 'http://repository.codehaus.org/'
  mavenRepo urls: "http://repository.jboss.com/maven2"
  mavenRepo urls: "http://bzb-framework.googlecode.com/svn/maven-repository"
  mavenRepo urls: "http://wicketstuff.org/maven/repository"
  mavenRepo urls: "http://maven.atlassian.com/repository/public"
}

dependencies {
  // wicket
  compile group: 'org.apache.wicket', name: 'wicket', version: '1.5-SNAPSHOT'
  compile group: 'org.apache.wicket', name: 'wicket-guice', version: '1.5-SNAPSHOT'

  // hibernate
  compile group: 'org.hibernate', name: 'ejb3-persistence', version: '1.0.2.GA'
  compile group: 'org.hibernate', name: 'hibernate-annotations', version: '3.4.0.GA'
  compile group: 'org.hibernate', name: 'hibernate-commons-annotations', version: '3.3.0.ga'
  compile group: 'org.hibernate', name: 'hibernate-search', version: '3.1.0.GA'
  compile group: 'javax.validation', name: 'validation-api', version: '1.0.CR5'

  // hades
  compile group: 'org.synyx.hades', name: 'org.synyx.hades', version: '2.0.0.RELEASE'

  // logging
  compile group: 'log4j', name: 'log4j', version: '1.2.14'
  compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.5.8'
  compile group: 'commons-logging', name: 'commons-logging', version: '1.1.1'

  // jetty
  compile group: 'org.mortbay.jetty', name: 'jetty', version: '6.1.25', scope: 'provided'
  compile group: 'org.mortbay.jetty', name: 'jetty-util', version: '6.1.25', scope: 'provided'
  compile group: 'org.mortbay.jetty', name: 'jetty-management', version: '6.1.25', scope: 'provided'

  // quartz 
  compile group: 'org.quartz-scheduler', name: 'quartz', version: '1.8.3'
//  compile group: 'org.quartz-scheduler', name: 'quartz-oracle', version: '1.8.3'
//  compile group: 'org.quartz-scheduler', name: 'quartz-weblogic', version: '1.8.3'
//  compile group: 'org.quartz-scheduler', name: 'quartz-jboss', version: '1.8.3'

  // other tools (Guava, Mockito)
  compile group: 'commons-io', name: 'commons-io', version: '1.4'
  compile group: 'com.google.guava', name: 'guava', version: 'r07'
  compile group: 'org.mockito', name: 'mockito-all', version: '1.8.1'

  // intellij sync
  groovy 'org.codehaus.groovy:groovy:1.7.2'
  compile 'org.slf4j:slf4j-log4j12:1.5.2'

  // test stuff
  testCompile group: 'junit', name: 'junit', version: '4.4'
  testCompile group: 'org.hibernate', name: 'hibernate-validator', version: '4.0.0.CR1'
}

//schemaExport.dialects = 'org.hibernate.dialect.Oracle10gDialect, org.hibernate.dialect.MySQL5Dialect, org.hibernate.dialect.PostgreSQLDialect, org.hibernate.dialect.HSQLDialect'

gradle.taskGraph.whenReady {graph ->
  if (graph.hasTask(runTest) || graph.hasTask(runWarTest)) {
    [jettyRun, jettyRunWar]*.daemon = true
  }
}
stopKey = 'foo'
stopPort = 9451
httpPort = 8080

task runTest(dependsOn: jettyRun) << {
  callServlet()
}

task runWarTest(dependsOn: jettyRunWar) << {
  callServlet()
}

private void callServlet() {
  URL url = new URL("http://localhost:$httpPort/quickstart")
  println url.text
  jettyStop.execute()
}

// ------------ sync with intellij dependencies ------------------
sourceCompatibility = 1.6
version = '1.0-SNAPSHOT'

final def GRADLE_TEST_LIBRARIES_ID = 'Gradle Test Libraries'
task intellijSync << {
    description = 'Add gradle dependecies to IntelliJ project library'

    final def librariesDir = new File(".idea${File.separator}libraries")
    librariesDir.mkdirs()

    final def userHomeGradle = project.gradle.gradleUserHomeDir
    println "Set the USER_HOME_GRADLE variable to '$userHomeGradle.path'"

    def makeJarList = { path ->
        path.split(File.pathSeparator).collect {
            it.replaceAll userHomeGradle.path, "\\\$USER_HOME_GRADLE\\\$"
        }
    }
    final def compileJars = makeJarList(configurations.compile.asPath)
    final def testJars = makeJarList(configurations.testCompile.asPath) - compileJars

    def createLibrary = { fileName, libraryName, jars ->
        final def gradleLibXml = new File(librariesDir, fileName)
        gradleLibXml.write """
<component name="libraryTable">
  <library name="$libraryName"/>
</component>"""
        final def xmlRoot = new XmlParser().parse(gradleLibXml)
        final def classesNode = xmlRoot.library[0].appendNode('CLASSES')

        jars.each { jar ->
            classesNode.appendNode('root', [url: "jar://$jar!/"])
        }

        def writer = new StringWriter()
        new XmlNodePrinter(new PrintWriter(writer)).print(xmlRoot)
        gradleLibXml.write writer.toString()
        println "File '${gradleLibXml.path}' updated"
    }
    createLibrary 'Gradle_Libraries.xml', 'Gradle Libraries', compileJars
    createLibrary 'Gradle_Test_Libraries.xml', GRADLE_TEST_LIBRARIES_ID, testJars
}

task intellijModuleSync(dependsOn: intellijSync) << {
    final def moduleFile = new File('afop-wicket.iml')
    def root = new XmlParser().parse(moduleFile)
    def newModuleRootManager = root.component.find {it.'@name' == 'NewModuleRootManager'}
    def orderEntry = newModuleRootManager.orderEntry.find {
        it.'@type' == 'library' && it.'@name' == GRADLE_TEST_LIBRARIES_ID
    }
    if (orderEntry) {
        newModuleRootManager.remove(orderEntry)
    }
    newModuleRootManager.appendNode('orderEntry', [type: 'library', scope: 'TEST', name: GRADLE_TEST_LIBRARIES_ID, level: 'project'])

    def writer = new StringWriter()
    new XmlNodePrinter(new PrintWriter(writer)).print(root)
    moduleFile.write writer.toString()
    println "File '${moduleFile.path}' updated"
}